{
  "boilerplate": {
    "prefix": "normal bolierplate",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "int main(){",
      "\t$1",
      "\treturn 0;",
      "}"
    ]
  },

  "just preprocessor": {
    "prefix": "preprocessing stuff",
    "body": [
      "/* TYPES  */",
      "#define ll long long",
      "#define pi pair<int, int>",
      "#define pl pair<long long, long long>",
      "#define vi vector<int>",
      "#define ve vector",
      "#define vvi vector<vector<int>>",
      "#define vll vector<long long>",
      "#define mii map<int, int>",
      "#define si set<int>",
      "#define sc set<char>",
      "",
      "/* FUNCTIONS */",
      "#define in(x) cin >> x;",
      "#define fi(i, a, n) for (int i = a; i < n; i++)",
      "#define fie(i, a, n) for (int i = a; i <= n; i++)",
      "#define fd(i, a, n) for (int i = a; i > n; i--)",
      "#define fde(i, a, n) for (int i = a; i >= n; i--)",
      "#define pb push_back",
      "#define eb emplace_back",
      "#define srt(arr) sort(arr.begin(), arr.end())",
      "#define srtc(arr, func) sort(arr.begin(), arr.end(), func)",
      "",
      "/* CONSTS */",
      "const int inf = INT_MAX;",
      "const int ninf = INT_MIN;",
      "const int mod = 1e9 + 7;",
      "",
      "/* Printing and debugging */",

      "#define varpr(...)  do {          std::stringstream ss;  ss << #__VA_ARGS__ << \" = \";  print_helper(ss, __VA_ARGS__);      std::cout << ss.str();      } while (false)",
      "",
      "template <typename T> void print_helper(std::stringstream &ss, const T &t) {",
      "  ss << t << std::endl;",
      "}",
      "",
      "template <typename T, typename... Args>",
      "void print_helper(std::stringstream &ss, const T &t, const Args &...args) {",
      "  ss << t << \", \";",
      "  print_helper(ss, args...);",
      "}",
      "",
      "#define pr(...)  do {  std::stringstream ss; print_helper2(ss, __VA_ARGS__); std::cout << ss.str() << std::endl;} while (false)",
      "",
      "template <typename T> void print_helper2(std::stringstream &ss, const T &t) {",
      "  ss << t;",
      "}",
      "",
      "template <typename T, typename... Args>",
      "void print_helper2(std::stringstream &ss, const T &t, const Args &...args) {",
      "  ss << t << \" \";",
      "  print_helper2(ss, args...);",
      "}",
      ""
    ],
    "description": "c++ boiler plate"
  },
  "cp boiler plate": {
    "prefix": "cf boilerplate",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "/* TYPES  */",
      "#define ll long long",
      "#define pi pair<int, int>",
      "#define pl pair<long long, long long>",
      "#define vi vector<int>",
      "#define ve vector",
      "#define vvi vector<vector<int>>",
      "#define vll vector<long long>",
      "#define mii map<int, int>",
      "#define si set<int>",
      "#define sc set<char>",
      "",
      "/* FUNCTIONS */",
      "#define in(x) cin >> x;",
      "#define fi(i, a, n) for (int i = a; i < n; i++)",
      "#define fie(i, a, n) for (int i = a; i <= n; i++)",
      "#define fd(i, a, n) for (int i = a; i > n; i--)",
      "#define fde(i, a, n) for (int i = a; i >= n; i--)",
      "#define pb push_back",
      "#define eb emplace_back",
      "",
      "/* CONSTS */",
      "const int inf = INT_MAX;",
      "const int ninf = INT_MIN;",
      "const int mod = 1e9 + 7;",
      "",
      "/* Printing and debugging */",

      "#define varpr(...)  do {          std::stringstream ss;  ss << #__VA_ARGS__ << \" = \";  print_helper(ss, __VA_ARGS__);      std::cout << ss.str();      } while (false)",
      "",
      "template <typename T> void print_helper(std::stringstream &ss, const T &t) {",
      "  ss << t << std::endl;",
      "}",
      "",
      "template <typename T, typename... Args>",
      "void print_helper(std::stringstream &ss, const T &t, const Args &...args) {",
      "  ss << t << \", \";",
      "  print_helper(ss, args...);",
      "}",
      "",
      "#define pr(...)  do {  std::stringstream ss; print_helper2(ss, __VA_ARGS__); std::cout << ss.str() << std::endl;} while (false)",
      "",
      "template <typename T> void print_helper2(std::stringstream &ss, const T &t) {",
      "  ss << t;",
      "}",
      "",
      "template <typename T, typename... Args>",
      "void print_helper2(std::stringstream &ss, const T &t, const Args &...args) {",
      "  ss << t << \" \";",
      "  print_helper2(ss, args...);",
      "}",
      "",
      "void solve() {",
      "\t$1",
      "}",
      "",
      "int main() {",
      "\tint t;",
      "\tcin >> t;",
      "\twhile (t--)",
      "\t\tsolve();",
      "\treturn 0;",
      "}"
    ],
    "description": "c++ boiler plate"
  },

  "cf normal input boilerplate": {
    "prefix": "cf normal input boilerplate",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "/* TYPES  */",
      "#define ll long long",
      "#define pi pair<int, int>",
      "#define pl pair<long long, long long>",
      "#define ve vector",
      "#define vi vector<int>",
      "#define vvi vector<vector<int>>",
      "#define vll vector<long long>",
      "#define mii map<int, int>",
      "#define si set<int>",
      "#define sc set<char>",
      "",
      "/* FUNCTIONS */",
      "#define in(x) cin >> x;",
      "#define fi(i, a, n) for (int i = a; i < n; i++)",
      "#define fie(i, a, n) for (int i = a; i <= n; i++)",
      "#define fd(i, a, n) for (int i = a; i > n; i--)",
      "#define fde(i, a, n) for (int i = a; i >= n; i--)",
      "#define pb push_back",
      "#define eb emplace_back",
      "",
      "/* CONSTS */",
      "const int inf = INT_MAX;",
      "const int ninf = INT_MIN;",
      "const int mod = 1e9 + 7;",
      "",
      "/* Printing and debugging */",

      "#define varpr(...)  do {          std::stringstream ss;  ss << #__VA_ARGS__ << \" = \";  print_helper(ss, __VA_ARGS__);      std::cout << ss.str();      } while (false)",
      "",
      "template <typename T> void print_helper(std::stringstream &ss, const T &t) {",
      "  ss << t << std::endl;",
      "}",
      "",
      "template <typename T, typename... Args>",
      "void print_helper(std::stringstream &ss, const T &t, const Args &...args) {",
      "  ss << t << \", \";",
      "  print_helper(ss, args...);",
      "}",
      "",
      "#define pr(...)  do {  std::stringstream ss; print_helper2(ss, __VA_ARGS__); std::cout << ss.str() << std::endl;} while (false)",
      "",
      "template <typename T> void print_helper2(std::stringstream &ss, const T &t) {",
      "  ss << t;",
      "}",
      "",
      "template <typename T, typename... Args>",
      "void print_helper2(std::stringstream &ss, const T &t, const Args &...args) {",
      "  ss << t << \" \";",
      "  print_helper2(ss, args...);",
      "}",
      "",
      "void solve() {",
      "\t$1 $2;",
      "\tcin >> $2;",
      "\t$3",
      "}",
      "",
      "int main() {",
      "\tint t;",
      "\tcin >> t;",
      "\twhile (t--)",
      "\t\tsolve();",
      "\treturn 0;",
      "}"
    ],
    "description": "c++ boiler plate"
  },
  "cp advanced boiler plate": {
    "prefix": "cf array input boilerplate",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "/* TYPES  */",
      "#define ll long long",
      "#define pi pair<int, int>",
      "#define pl pair<long long, long long>",
      "#define vi vector<int>",
      "#define ve vector",
      "#define vvi vector<vector<int>>",
      "#define vll vector<long long>",
      "#define mii map<int, int>",
      "#define si set<int>",
      "#define sc set<char>",
      "",
      "/* FUNCTIONS */",
      "#define in(x) cin >> x;",
      "#define fi(i, a, n) for (int i = a; i < n; i++)",
      "#define fie(i, a, n) for (int i = a; i <= n; i++)",
      "#define fd(i, a, n) for (int i = a; i > n; i--)",
      "#define fde(i, a, n) for (int i = a; i >= n; i--)",
      "#define pb push_back",
      "#define eb emplace_back",
      "",
      "/* CONSTS */",
      "const int inf = INT_MAX;",
      "const int ninf = INT_MIN;",
      "const int mod = 1e9 + 7;",
      "",
      "/* Printing and debugging */",

      "#define varpr(...)  do {          std::stringstream ss;  ss << #__VA_ARGS__ << \" = \";  print_helper(ss, __VA_ARGS__);      std::cout << ss.str();      } while (false)",
      "",
      "template <typename T> void print_helper(std::stringstream &ss, const T &t) {",
      "  ss << t << std::endl;",
      "}",
      "",
      "template <typename T, typename... Args>",
      "void print_helper(std::stringstream &ss, const T &t, const Args &...args) {",
      "  ss << t << \", \";",
      "  print_helper(ss, args...);",
      "}",
      "",
      "#define pr(...)  do {  std::stringstream ss; print_helper2(ss, __VA_ARGS__); std::cout << ss.str() << std::endl;} while (false)",
      "",
      "template <typename T> void print_helper2(std::stringstream &ss, const T &t) {",
      "  ss << t;",
      "}",
      "",
      "template <typename T, typename... Args>",
      "void print_helper2(std::stringstream &ss, const T &t, const Args &...args) {",
      "  ss << t << \" \";",
      "  print_helper2(ss, args...);",
      "}",
      "",
      "void solve() {",
      "\tint n;",
      "\tcin >> n;",
      "\tvector<$1> v(n); ",
      "\tfor ($1&a : v) cin >> a;",
      "}",
      "",
      "int main() {",
      "\tint t;",
      "\tcin >> t;",
      "\twhile (t--)",
      "\t\tsolve();",
      "\treturn 0;",
      "}"
    ],
    "description": "c++ boiler plate"
  },
  "dsa 1 boiler plate": {
    "prefix": "lc1inp boilerplate",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Solution {",
      "public:",
      "\t$1 $2($3 $4) {",
      "\t}",
      "};",
      "",
      "int main() {",
      "\t$3 $4 = $5;",
      "\tSolution sol = Solution();",
      "\tsol.$2($4);",
      "\treturn 0;",
      "}"
    ],
    "description": "c++ boiler plate"
  },
  "dsa 2 boiler plate": {
    "prefix": "lc2inp boilerplate",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Solution {",
      "public:",
      "\t$1 $2($3 $4, $6 $7) {",
      "\t}",
      "};",
      "",
      "int main() {",
      "\t$3 $4 = $5;",
      "\t$6 $7 = $8;",
      "\tSolution sol = Solution();",
      "\tsol.$2($4, $7);",
      "\treturn 0;",
      "}"
    ],
    "description": "c++ boiler plate"
  },

  "dsa 3 boiler plate": {
    "prefix": "lc3inp boilerplate",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Solution {",
      "public:",
      "\t$1 $2($3 $4, $6 $7, $9 $10) {",
      "\t}",
      "};",
      "",
      "int main() {",
      "\t$3 $4 = $5;",
      "\t$6 $7 = $8;",
      "\t$9 $10 = $11;",
      "\tSolution sol = Solution();",
      "\tsol.$2($4, $7, $10);",
      "\treturn 0;",
      "}"
    ],
    "description": "c++ boiler plate"
  },
  "dsa 4 boiler plate": {
    "prefix": "lc4inp boilerplate",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Solution {",
      "public:",
      "\t$1 $2($3 $4, $6 $7, $9 $10, $12 $13) {",
      "\t}",
      "};",
      "",
      "int main() {",
      "\t$3 $4 = $5;",
      "\t$6 $7 = $8;",
      "\t$9 $10 = $11;",
      "\t$12 $13 = $14;",
      "\tSolution sol = Solution();",
      "\tsol.$2($4, $7, $10, $13);",
      "\treturn 0;",
      "}"
    ],
    "description": "c++ boiler plate"
  },
  "dsa 5 boiler plate": {
    "prefix": "cn boilerplate",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "\t$1 $2($3 $4) {",
      "\t}",
      "",
      "int main() {",
      "\t$2($4);",
      "\treturn 0;",
      "}"
    ],
    "description": "c++ boiler plate"
  }
}
